#!/usr/bin/python3
import rclpy
from  rclpy.node import Node
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import sys
import scan_echo
from math import sin
from time import time,sleep
import random as rd
#positive :gauche:left
# Ros Node process:
def main():
    # Initialize ROS and a ROS node
    rclpy.init(args=sys.argv)
    node= Node( 'basic_move' )
    node.declare_parameter('is_simulation',False)
    node.declare_parameter('tunnel_vision_width',0.50)
    node.declare_parameter('time_step_random_turn',20)

    #Check if simulation
    global cmd_robot_topic,scan_robot_topic,tunnel_vision_width,is_simulation,time_step_random_turn

    is_simulation=node.get_parameter('is_simulation').value
    tunnel_vision_width=node.get_parameter('tunnel_vision_width').value
    time_step_random_turn=node.get_parameter('time_step_random_turn').value

    if not is_simulation:
        global WheelDropEvent, ButtonEvent
        from kobuki_ros_interfaces.msg import WheelDropEvent, ButtonEvent
        cmd_robot_topic='/multi/cmd_nav'
        scan_robot_topic='/scan'
    else:
        cmd_robot_topic='/cmd_vel'
        scan_robot_topic='/base_scan'

    # Initialize our control:
    control= StraightCtrl()
    control.initializeRosNode( node )

    # infinite Loop:
    rclpy.spin( node )

    # clean end
    node.destroy_node()
    rclpy.shutdown()

# Ros Node Class:
class StraightCtrl :
    def initializeRosNode(self, rosNode ):                                                 #initialization
        # Get logger from the node:
        self._logger= rosNode.get_logger()
        self.obstacle_right_close=False
        self.obstacle_left_close=False
        self.obstacle_right_far=False
        self.obstacle_left_far=False
        self.obstacle_full_left_far=False
        self.obstacle_full_right_far=False
        self.no_scan=True
        self.previous_z=0.5
        self.previous_x=0.15
        self.previous_message=""
        self.cmd_robot_topic=''
        self.scan_robot_topic=''
        self._emergency_stop=False
        self.random_turning=False
        # Initialize publisher:
        self._pubVelocity= rosNode.create_publisher(
            Twist, cmd_robot_topic, 10
        )
        # Initialize scan callback:
        self._subToScan= rosNode.create_subscription(
            LaserScan,scan_robot_topic ,
            self.scan_callback, 10
        )
        if not is_simulation:
            self.sub_bouton=rosNode.create_subscription(ButtonEvent,'events/button',self.button,10)
            self._subToWheelDrop= rosNode.create_subscription(
                WheelDropEvent, '/events/wheel_drop',
                self.wheel_drop, 10
            )
        # Initialize control callback:
        self._timForCtrl= rosNode.create_timer(
            0.05, self.control_callback
        )
        self._randomTurn= rosNode.create_timer(
            time_step_random_turn, self.random_turn
        )

    # function allowing the robot to do a random turn
    def random_turn(self):
        if  not self._emergency_stop:
            velocity=Twist()
            self.random_turning=True                                                       #a random turn is ongoing
            direction=rd.randint(1,2)                                                      #a random direction between right and lrft is chosen
            angle_value=rd.randint(30,180)                                                 #a random angle is chosen
            if direction==1:angle=-angle_value
            if direction==2:angle=angle_value
            print("je commence l'op")
            while self.previous_x>0.0 and not self._emergency_stop:
                velocity.linear.x=self.smooth_speed_target(0.0,0.03)
                self.previous_x=velocity.linear.x
                self._pubVelocity.publish(velocity)
                print("ralentir")
            print("je tourne de "+str(angle)+" deg")
            self.turn_by_given_angle(angle,0.7)
            print("j'ai fini de tourner")
            while self.previous_x<0.1 and not self._emergency_stop:
                velocity.linear.x=self.smooth_speed_target(0.5,0.02)
                self.previous_x=velocity.linear.x
                self._pubVelocity.publish(velocity)
                print('avancer')
            print("j'ai fini l'op")
            self.random_turning=False
    
    def scan_callback(self, scanMsg ):
        #self._logger.info( '> get scan' )
        self.process_scan_data(scanMsg)

    def control_callback(self):
        if not self.random_turning:
            #self._logger.info( '< define control' )
            self.states=[]
            velocity=Twist()
            velocity.angular.z = self.previous_z #rad/s
            base_angular_speed=0.7                                                         #rotation speed
            message=""
            #=================================#
            # First case : nothing is scanned #
            #=================================#
            if self.no_scan or self._emergency_stop:                                       #if nothing is scanned, the robot stop
                print("no scan/emergency stop")
                velocity.linear.x = 0.0 #m/s
                velocity.angular.z = 0.0 #rad/s
                self._pubVelocity.publish(velocity)
            #======================================#
            # Second case : something is too close #
            #======================================#
            elif self.totalmindistance<0.15:                                               #if an object is too close, the robot can only rotate on itself
                message+="object to close, turning around\n"
                velocity.linear.x = 0.0 #m/s
                velocity.angular.z  = -self.previous_z
                self._pubVelocity.publish(velocity)
            #=================================#
            # Third case : something is close #
            #=================================#
            elif self.obstacle_right_close or self.obstacle_left_close:                    #something is close
                #We look at the situation (where are the obstacles) and we choose where to move

                # 1) something is close both on the right and on the left
                if self.obstacle_right_close and self.obstacle_left_close:                  
                    message+="state3:close obstacle both directions\n"

                    # is there an obstacle 90° far ?
                    if self.obstacle_full_left_far and not self.obstacle_full_right_far:    #also there is something far on the right but not on the left
                        message+="choosed to go right\n"                                    #so the robot go to the right
                        velocity.angular.z = -base_angular_speed #rad/s 
                    if self.obstacle_full_right_far and not self.obstacle_full_left_far:    #also there is something far on the left but not on the right
                        message+="choosed to go left\n"                                     #so the robot go to the left
                        velocity.angular.z=base_angular_speed
                    #We adapt our speed to the current one
                    if velocity.angular.z==0:                                               #if its the first turn and there is not one far side triggered, the robot go to the left
                        velocity.angular.z=base_angular_speed                  
                    
                    velocity.linear.x=self.smooth_speed_target(0.0,0.02)
                    
                # 2) something is close on the right but not on the left    
                elif self.obstacle_right_close and not self.obstacle_left_close:
                    message+="state1:close obstacle right\n"

                    #We adapt our speed to the current one
                    velocity.linear.x=self.smooth_speed_target(0.0,0.02)

                    #is there something far on the left ?    
                    if not self.obstacle_full_left_far:                                     #if not the robot turn to the left
                        velocity.angular.z = base_angular_speed #rad/s
                    if velocity.angular.z==0:
                        velocity.angular.z=base_angular_speed

                # 3) something is close on the left but not on the right        
                elif self.obstacle_left_close and not self.obstacle_right_close:
                    message+="state2:close obstacle left\n"

                    #We adapt our speed to the current one              
                    velocity.linear.x=self.smooth_speed_target(0.0,0.02)

                    #is there something far on the right ?     
                    if not self.obstacle_full_right_far:                                    #if not the robot turn to the right
                        velocity.angular.z = -base_angular_speed #rad/s
                    if velocity.angular.z==0:
                        velocity.angular.z=base_angular_speed

                if velocity.linear.x<0.0:velocity.linear.x=0.0                              #avoiding errors

                #previous values
                self.previous_z=velocity.angular.z
                self.previous_x=velocity.linear.x

                #publishing
                self._pubVelocity.publish(velocity)

            #================================#
            # Fourth case : something is far #
            #================================#
            elif self.obstacle_right_far or self.obstacle_left_far:
                #We look at the situation (where are the obstacles) and we choose where to move

                # 1) something is far on the right but not on the left  
                if self.obstacle_right_far and not self.obstacle_left_far:
                    message+="state4:far obstacle right\n"

                    #the robot goes to the linear speed of 0.2 smoothly
                    velocity.linear.x=self.smooth_speed_target(0.2,0.02)

                    #the angle is adapted to the distance (the closer the obstacle is, the greater is the angle)
                    velocity.angular.z = -0.83*self.mindistance+1.45 #rad/s                the robot goes to the left
    
                # 2) something is far on the left but not on the right  
                elif self.obstacle_left_far and not self.obstacle_right_far:
                    message+="state5:far obstacle left\n"

                    #the robot goes to the linear speed of 0.2 smoothly
                    velocity.linear.x=self.smooth_speed_target(0.2,0.02)

                    #the angle is adapted to the distance (the closer the obstacle is, the greater is the angle)
                    velocity.angular.z = -(-0.83*self.mindistance+1.45) #rad/s             the robot goes to the right

                # 3) something is far both on the right and the left
                
                elif self.obstacle_right_far and self.obstacle_left_far:
                    message+="state6:far obstacle both directions\n"

                    #there is something at 90 degres on the left and not on the right
                    if self.obstacle_full_left_far and not self.obstacle_full_right_far:
                        velocity.angular.z = -base_angular_speed #rad/s                    the robot goes to the right
                    
                    #there is something at 90 degres on the right and not on the left
                    if self.obstacle_full_right_far and not self.obstacle_full_left_far:
                        velocity.angular.z=base_angular_speed #rad/s                       the robot goes to the left

                    #there is something at 90 degres on the right and the left
                    if self.obstacle_full_right_far and self.obstacle_full_left_far:
                        if self.full_right_min<self.full_left_min:
                            velocity.angular.z=base_angular_speed #rad/s                   the robot goes to the left
                        else:
                            velocity.angular.z = -base_angular_speed #rad/s                the robot goes to the right
                    velocity.linear.x=self.smooth_speed_target(0.15,0.03)
                   

                #previous values
                self.previous_z=velocity.angular.z
                self.previous_x=velocity.linear.x

                #publishing
                self._pubVelocity.publish(velocity)

            #===================================#
            # Fifth case : no obstacle in front #
            #===================================#
            else:
                #the robot goes forward
                velocity.angular.z = 0.0#rad/s
                velocity.linear.x=self.smooth_speed_target(0.7,0.02)
                message+="state 0:no obstacles\n"
                #previous values
                self.previous_z=velocity.angular.z
                self.previous_x=velocity.linear.x
                #publishing
                self._pubVelocity.publish(velocity)

            #=============================#
            # Print the current situation #
            #=============================#
            #printing if there are obstacles and where and the current linear and rotative speeds
            message+=str(self.obstacle_left_far)+","+str(self.obstacle_right_far)+"\n"+str(self.obstacle_left_close)+","+str(self.obstacle_right_close)+"\n"+str(self.obstacle_full_left_far)+","+str(self.obstacle_full_right_far)+"\n"+"speed:"+str(self.previous_x)+"    rotation:"+str(self.previous_z)

            #the message is printed only if it is different from the previous one
            if True: # self.previous_message!=message:
                print("#----------------#")
                print(message)
                print("|----------------|")
            self.previous_message=message


    #================================================================#
    # Definition of the position of the obstacle from the LIDAR data #
    #================================================================#
    def process_scan_data(self,scanMsg):
        #Initialization
        self.obstacle_right_close=False
        self.obstacle_left_close=False
        self.obstacle_right_far=False
        self.obstacle_left_far=False
        self.obstacle_full_left_far=False
        self.obstacle_full_right_far=False
        self.totalmindistance=100
        self.maxdistance=0
        self.mindistance=100
        self.full_right_min=100
        self.full_left_min=100
        # The robot looks in a 40cm tunnel in front of him
        scan_tunnel_d=tunnel_vision_width

        if scanMsg is not None : 
            self.no_scan=False
            angle= scanMsg.angle_min
            for aDistance in scanMsg.ranges :

                #for each distance received we look if the obstacle is in the tunnel in front the robot and if so, where it is (right, left, far, close)    
                if 0.1 < aDistance:
                    if aDistance < 1.1 :
                        if self.totalmindistance>aDistance:self.totalmindistance=aDistance
                        if aDistance<0.35:
                            if angle <0 and angle >-1:
                                self.obstacle_right_close=True
                            if angle >0 and angle <1:
                                self.obstacle_left_close=True
                        else:
                            if angle <0 and angle >-1:
                                if scan_tunnel_d/(2*sin(-angle))>=aDistance:
                                    self.obstacle_right_far=True
                                    if self.maxdistance<aDistance: self.maxdistance=aDistance
                                    if self.mindistance>aDistance: self.mindistance=aDistance   
                            if angle >0 and angle <1:
                                if scan_tunnel_d/(2*sin(angle))>=aDistance:
                                    self.obstacle_left_far=True
                                    if self.maxdistance<aDistance: self.maxdistance=aDistance
                                    if self.mindistance>aDistance: self.mindistance=aDistance

                    #we also look if there are obstacles at 90 degres on each side of the robot
                    if aDistance<3:
                        if angle<-1.39 and angle >-1.55:
                            self.obstacle_full_right_far=True
                            if self.full_right_min>aDistance:self.full_right_min=aDistance
                        if angle>1.39 and angle <1.55:
                            self.obstacle_full_left_far=True
                            if self.full_left_min>aDistance:self.full_left_min=aDistance
                angle+= scanMsg.angle_increment
        else : 
            self.no_scan=True
            print("Scan not found, exit")


    # Function allowing the robot to reach smoothly a linear speed target
    def smooth_speed_target(self,target:float,step:float):
        velocity=Twist()
        if self.previous_x>target+15*step:                                                #if the robot was moving fast, it slows hardly
            velocity.linear.x=self.previous_x -step*2
        elif self.previous_x>target+step:                                                 #if the robot was moving slow, its slow softly
            velocity.linear.x=self.previous_x -step
        elif self.previous_x<target-step:
            velocity.linear.x=self.previous_x +step
        else:                                                                             #if the robot was not moving, it continue
            velocity.linear.x=target
        return(velocity.linear.x)

    # Function to compute and execute a rotation given an angle
    def turn_by_given_angle(self,deg,angular_speed):
        velocity=Twist()
        deg_per_sec=angular_speed*180/3.14
        duration=abs(deg/deg_per_sec) - 0.25                                              #computation of the duration of the rotation needed to reach the target angle
        if deg<0:
            rotation_speed=-angular_speed
        else:
            rotation_speed=angular_speed
        start = time()
        counter=0
        while counter < duration and not self._emergency_stop:                            #rotation until the end of the duration if no emergency stop
            velocity.angular.z = rotation_speed
            counter = time()-start
            #Previous values
            self.previous_z=velocity.angular.z
            #Publish
            self._pubVelocity.publish(velocity)

    #function that cause the robot to stop if it is lifted
    def wheel_drop(self,msg):
        # if msg.state==0:
        #     self._emergency_stop=False
        if msg.state==1:
            velocity=Twist()
            velocity.linear.x = 0.0 #m/s
            velocity.angular.z = 0.0 #rad/s
            self._pubVelocity.publish(velocity)
            self._emergency_stop=True                                                    #the variable emergency stop is set to true until a button is pushed on the robot

    def button(self,msg):
        if msg.state == 1:
            self._emergency_stop=False                                                   #when a button is pushed, the emergency stop is restart and the robot can move again

        

# Go:
if __name__ == '__main__' :
    main()