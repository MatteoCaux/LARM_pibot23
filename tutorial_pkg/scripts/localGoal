#!/usr/bin/python3
import rclpy
from  rclpy.node import Node
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist,Pose
import sys
import scan_echo
import tf2_ros
import turtlesim.msg
import tf2_geometry_msgs
def main():
    rclpy.init()
    localGoalNode= localGoal()
    # Start infinite loop
    rclpy.spin(localGoalNode)
    # Clean everything and switch the light off
    aNode.destroy_node()
    rclpy.shutdown()

# on transforme une position dans 'odom' en une position dans 'base_link' (ca sera une position map in fine)
class localGoal(Node):
    def __init__(self):
        super().__init__('localgoalTF')
        self.global_goal=Pose()
        #Pubs
        self._pubLocalPose= self.create_publisher(
            Pose, "/moveto/localgoal", 10
        )
        #Subs
        self._subToGoalPose= self.create_subscription(
                Pose, '/moveto/globalgoal',
                self.global_goal_listen, 10
            )
        # Transform tool:
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)
        # Node Attribute:
        self.local_frame= 'base_link'

        self.create_timer(0.1, self.publish_goal)

    #Subs calls
    def global_goal_listen(self,msg):
        self.global_goal=msg

    #Process funcs
    def publish_goal(self):
        currentTime= rclpy.time.Time()
        # Get Transformation
        try:
            stampedTransform= self.tf_buffer.lookup_transform(
                        'odom',
                        self.local_frame,
                        currentTime)
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as tex: #:TransformException
            self.get_logger().info( f'Could not transform the goal into {self.local_frame}: {tex}')
            return
        # Compute goal into local coordinates
        localGoal = tf2_geometry_msgs.do_transform_pose( self.global_goal, stampedTransform )
        #localGoal.position.x = 0.0
        #localGoal.orientation.x = 0.0
        #tf2_geometry_msgs.do_transform_pose( self.global_goal, localGoal, stampedTransform )
        self._pubLocalPose.publish(localGoal)


if __name__ == '__main__':
    main()
    