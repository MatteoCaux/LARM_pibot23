#!/usr/bin/python3
# import rclpy
# from  rclpy.node import Node
# from sensor_msgs.msg import LaserScan
# from geometry_msgs.msg import Twist,Pose
# from visualization_msgs.msg import Marker
# import sys
# import scan_echo
# import tf2_ros
# import turtlesim.msg
# import tf2_geometry_msgs
import cv2
import numpy as np

def deg2rad(angle):
    return (angle * 2 * np.pi)/360.0

def mat4x4(rot,trans):
    RT=np.concatenate((rot,trans),axis=1)
    mat4x4 = np.concatenate((RT,np.asanyarray([[0,0,0,1]])),axis=0)
    return mat4x4

def cam2lidar(pose):
    #matrices de rotation 
    rot1=cv2.Rodrigues(np.asanyarray([deg2rad(-10),0,0]))[0]
    rot2=cv2.Rodrigues(np.asanyarray([0,deg2rad(90),0]))[0]
    rot3=cv2.Rodrigues(np.asanyarray([deg2rad(-90),0,0]))[0]

    # vecteur translation
    trans = np.asanyarray([[0],[0],[0.13]])

    # mat1=mat4x4(rot1,np.asanyarray([[0],[0],[0]]))
    # mat2=mat4x4(rot2,np.asanyarray([[0],[0],[0]]))
    # mat3=mat4x4(rot3,np.asanyarray([[0],[0],[0]]))
    # mat4=mat4x4(np.asanyarray([[0,0,0],[0,0,0],[0,0,0]]),trans)

    # mat_tot = mat4 @ mat3 @ mat2 @ mat1

    mat_tot = mat4x4(rot3@rot2@rot1,trans) 
    # print(mat1)
    # print(mat2)
    # print(mat3)

    # print(mat_tot)
    # print(mat_tot_2)

    pose2 = mat_tot @ np.asanyarray([[pose[0]],[pose[1]],[pose[2]],[1]])
    print (pose2)

    return pose2

def publish_markers(local_goal):
    FantomeMarker=Marker()
    FantomeMarker.header.frame_id='map'
    FantomeMarker.header.stamp=self.get_clock().now().to_msg()
    FantomeMarker.ns='GoalMarkers'
    FantomeMarker.id=0
    FantomeMarker.pose=fantome_pose
    FantomeMarker.type=10
    FantomeMarker.action = 0
    FantomeMarker.mesh_resource = "/home/imtne.local/kristian.bouvet/ros_space/src/LARM_pibot23/tutorial_pkg/stl/Ghost-8x3.stl"
    FantomeMarker.scale.x = 1.0
    FantomeMarker.scale.y = 1.0
    FantomeMarker.scale.z = 1.0
    FantomeMarker.color.a = 1.0
    FantomeMarker.color.r = 0.0
    FantomeMarker.color.g = 1.0
    FantomeMarker.color.b = 0.0

    self._pubFantomeMarker.publish(FantomeMarker)

def main():
    # cam2lidar([0,0,10])
    cam2lidar2([0,0,10])



if __name__=="__main__":
    main()