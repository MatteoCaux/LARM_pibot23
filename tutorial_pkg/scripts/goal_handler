#!/usr/bin/python3
import rclpy
from  rclpy.node import Node
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist,Pose
from visualization_msgs.msg import Marker
import sys
import scan_echo
import tf2_ros
import turtlesim.msg
import tf2_geometry_msgs
def main():
    rclpy.init()
    localGoalNode= localGoal()
    # Start infinite loop
    rclpy.spin(localGoalNode)
    # Clean everything and switch the light off
    aNode.destroy_node()
    rclpy.shutdown()

# on transforme une position dans 'odom' en une position dans 'base_link' (ca sera une position map in fine)
class localGoal(Node):
    def __init__(self):
        super().__init__('localgoalTF')
        self.global_goal=Pose()
        self.global_frame='map'
        #Pubs
        self._pubLocalPose= self.create_publisher(
            Pose, "/moveto/localgoal", 10
        )
        self._pubLocalPoseMarker= self.create_publisher(
            Marker, "/moveto/localgoalMarker", 10
        )
        self._pubGlobalPoseMarker= self.create_publisher(
            Marker, "/moveto/globalgoalMarker", 10
        )
        #Subs
        self._subToGoalPose= self.create_subscription(
                Pose, '/moveto/globalgoal',
                self.global_goal_listen, 10
            )
        # Transform tool:
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)
        # Node Attribute:
        self.local_frame= 'base_link'

        self.create_timer(0.1, self.publish_goal)

    #Subs calls
    def global_goal_listen(self,msg):
        self.global_goal=msg

    #Process funcs
    def publish_goal(self):
        currentTime= rclpy.time.Time()
        # Get Transformation
        try:
            stampedTransform= self.tf_buffer.lookup_transform(
                        self.local_frame,
                        self.global_frame,
                        currentTime)
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as tex: #:TransformException
            self.get_logger().info( f'Could not transform the goal into {self.local_frame}: {tex}')
            return
        # Compute goal into local coordinates
        localGoal = tf2_geometry_msgs.do_transform_pose( self.global_goal, stampedTransform )
        self._pubLocalPose.publish(localGoal)
        self.publish_markers(localGoal)

    def publish_markers(self,local_goal):
        LocalPoseMarker=Marker()
        GlobalPoseMarker=Marker()
        LocalPoseMarker.header.frame_id='base_link'
        LocalPoseMarker.header.stamp=self.get_clock().now().to_msg()
        LocalPoseMarker.ns='GoalMarkers'
        LocalPoseMarker.id=0
        LocalPoseMarker.pose=local_goal
        LocalPoseMarker.type=LocalPoseMarker.CUBE
        LocalPoseMarker.action = LocalPoseMarker.ADD
        LocalPoseMarker.scale.x = 0.1
        LocalPoseMarker.scale.y = 0.1
        LocalPoseMarker.scale.z = 1.0
        LocalPoseMarker.color.a = 1.0
        LocalPoseMarker.color.r = 0.0
        LocalPoseMarker.color.g = 1.0
        LocalPoseMarker.color.b = 0.0
        GlobalPoseMarker.header.frame_id=self.global_frame
        GlobalPoseMarker.header.stamp=self.get_clock().now().to_msg()
        GlobalPoseMarker.ns='GoalMarkers'
        GlobalPoseMarker.id=1
        GlobalPoseMarker.pose=self.global_goal
        GlobalPoseMarker.type=GlobalPoseMarker.CUBE
        GlobalPoseMarker.action = GlobalPoseMarker.ADD
        GlobalPoseMarker.scale.x = 0.1
        GlobalPoseMarker.scale.y = 0.1
        GlobalPoseMarker.scale.z = 1.0
        GlobalPoseMarker.color.a = 1.0
        GlobalPoseMarker.color.r = 1.0
        GlobalPoseMarker.color.g = 0.0
        GlobalPoseMarker.color.b = 0.0
        self._pubLocalPoseMarker.publish(LocalPoseMarker)
        self._pubGlobalPoseMarker.publish(GlobalPoseMarker)

if __name__ == '__main__':
    main()
    